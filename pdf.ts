import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { FilledFormData } from './forms';

export interface PDFGenerationOptions {
  textColor: 'black' | 'blue';
  includeSignature: boolean;
  includePhoto: boolean;
  formName: string;
  formData: FilledFormData;
  signature?: string;
  photo?: string;
}

export const generatePDF = async (options: PDFGenerationOptions): Promise<Uint8Array> => {
  const { textColor, formName, formData, signature, photo } = options;
  
  // Create a new PDF document
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([595.28, 841.89]); // A4 size
  
  // Set up fonts and colors
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  const color = textColor === 'blue' ? rgb(0.15, 0.39, 0.91) : rgb(0, 0, 0);
  
  // Title
  page.drawText(formName.toUpperCase(), {
    x: 50,
    y: 750,
    size: 18,
    font: boldFont,
    color
  });
  
  // Form fields
  let yPosition = 700;
  const fieldSpacing = 30;
  
  Object.entries(formData).forEach(([fieldId, value]) => {
    if (value && value.trim() !== '') {
      const label = getFieldDisplayName(fieldId);
      
      // Field label
      page.drawText(`${label}:`, {
        x: 50,
        y: yPosition,
        size: 12,
        font: boldFont,
        color
      });
      
      // Field value
      page.drawText(value, {
        x: 200,
        y: yPosition,
        size: 12,
        font,
        color
      });
      
      yPosition -= fieldSpacing;
    }
  });
  
  // Add signature if provided
  if (signature) {
    page.drawText('Digital Signature:', {
      x: 50,
      y: yPosition - 50,
      size: 12,
      font: boldFont,
      color
    });
    
    // In a real implementation, you would embed the signature image
    page.drawText('[Digital Signature]', {
      x: 200,
      y: yPosition - 50,
      size: 12,
      font,
      color
    });
  }
  
  // Add photo if provided
  if (photo) {
    page.drawText('Photo:', {
      x: 400,
      y: 700,
      size: 12,
      font: boldFont,
      color
    });
    
    // In a real implementation, you would embed the photo image
    page.drawText('[Photo]', {
      x: 400,
      y: 680,
      size: 12,
      font,
      color
    });
  }
  
  // Add footer with generation date
  const now = new Date();
  page.drawText(`Generated on: ${now.toLocaleDateString('en-IN')}`, {
    x: 50,
    y: 50,
    size: 10,
    font,
    color: rgb(0.5, 0.5, 0.5)
  });
  
  page.drawText('Generated by Autofill.Ai', {
    x: 400,
    y: 50,
    size: 10,
    font,
    color: rgb(0.5, 0.5, 0.5)
  });
  
  // Serialize the PDF
  const pdfBytes = await pdfDoc.save();
  return pdfBytes;
};

const getFieldDisplayName = (fieldId: string): string => {
  const displayNames: { [key: string]: string } = {
    fullName: 'Full Name',
    dateOfBirth: 'Date of Birth',
    gender: 'Gender',
    fatherName: "Father's Name",
    motherName: "Mother's Name",
    mobileNumber: 'Mobile Number',
    email: 'Email Address',
    aadhaarNumber: 'Aadhaar Number',
    panNumber: 'PAN Number',
    passportNumber: 'Passport Number',
    streetAddress: 'Street Address',
    city: 'City',
    state: 'State',
    pinCode: 'PIN Code',
  };
  
  return displayNames[fieldId] || fieldId;
};

export const downloadPDF = (pdfBytes: Uint8Array, filename: string) => {
  const blob = new Blob([pdfBytes], { type: 'application/pdf' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};
